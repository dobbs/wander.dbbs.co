{
  "version": 3,
  "names": [
    "bind",
    "emit",
    "escape",
    "evalPage",
    "evalPart",
    "open_all",
    "parse",
    "run",
    "word",
    "line",
    "replace",
    "string",
    "match",
    "message",
    "concat",
    "text",
    "arg",
    "err",
    "errors",
    "html",
    "i",
    "len",
    "listing",
    "op",
    "program",
    "ref",
    "split",
    "length",
    "_line$match",
    "_line$match2",
    "_slicedToArray",
    "push",
    "type",
    "regex",
    "RegExp",
    "error",
    "join",
    "page",
    "steps",
    "count",
    "action",
    "item",
    "j",
    "len1",
    "ref1",
    "step",
    "story",
    "journal",
    "part",
    "json",
    "key",
    "toLowerCase",
    "JSON",
    "stringify",
    "$item",
    "status",
    "want",
    "find",
    "$",
    "getJSON",
    "location",
    "host",
    "sitemap",
    "checked",
    "found",
    "place",
    "results",
    "slug",
    "report",
    "title",
    "append",
    "wiki",
    "resolveLinks",
    "caption",
    "_parse",
    "_parse2",
    "this_page",
    "titles",
    "doInternalLink",
    "on",
    "textEditor",
    "e",
    "_parse3",
    "_parse4",
    "stopPropagation",
    "preventDefault",
    "shiftKey",
    "parents",
    "map",
    "window",
    "plugins",
    "grep",
    "module",
    "exports"
  ],
  "sources": [
    "grep.coffee"
  ],
  "sourcesContent": [
    "###\n * Federated Wiki : Grep Plugin\n *\n * Licensed under the MIT license.\n * https://github.com/fedwiki/wiki-plugin-grep/blob/master/LICENSE.txt\n###\n\nescape = (line) ->\n  line\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n\nword = (string) ->\n  throw {message:\"expecting type for '#{string}'\"} unless string.match /^[a-z]*$/\n  string\n\nparse = (text) ->\n  program = []\n  listing = []\n  errors = 0\n  for line in text.split(\"\\n\")\n    html = escape line\n    try\n      [match, op, arg] = line.match(/^\\s*(\\w*)\\s*(.*)$/)\n      switch op\n        when '' then\n        when 'ITEM','ACTION' then program.push {op, type:word(arg)}\n        when 'TEXT','TITLE','SITE','ID','ALIAS','JSON' then program.push {op, regex: new RegExp(arg,'mi')}\n        else throw {message:\"don't know '#{op}' command\"}\n    catch err\n      errors++\n      html = \"\"\"<span style=\"background-color:#fdd;width:100%;\" title=\"#{err.message}\">#{html}</span>\"\"\"\n    listing.push html\n  [program, listing.join('<br>'), errors]\n\nevalPage = (page, steps, count) ->\n  return true unless count < steps.length\n  step = steps[count]\n  switch step.op\n    when 'ITEM'\n      count++\n      for item in page.story || []\n        if step.type == ''\n          return true if evalPart item, steps, count\n        else\n          if item.type is step.type\n            return true if evalPart item, steps, count\n      return false\n    when 'ACTION'\n      count++\n      for action in page.journal || []\n        if step.type == ''\n          return true if evalPart action, steps, count\n        else\n          if action.type is step.type\n            return true if evalPart action, steps, count\n      return false\n  evalPart page, steps, count\n\nevalPart = (part, steps, count) ->\n  return true unless count < steps.length\n  step = steps[count++]\n  switch step.op\n    when 'TEXT','TITLE','SITE','ID','ALIAS'\n      key = step.op.toLowerCase()\n      return true if (part[key] || part.item?[key] || '').match step.regex\n    when 'JSON'\n      json = JSON.stringify part, null, ' '\n      return true if json.match step.regex\n  false\n\nrun = ($item, program) ->\n\n  status = (text) ->\n    $item.find('.caption').text text\n\n  want = (page) ->\n    evalPage page, program, 0\n\n  status \"fetching sitemap\"\n  $.getJSON \"//#{location.host}/system/sitemap.json\", (sitemap) ->\n    checked = 0\n    found = 0\n    for place in sitemap\n      $.getJSON \"//#{location.host}/#{place.slug}.json\", (page) ->\n        text = \"[[#{page.title}]] (#{page.story.length})\"\n        if want page\n          found++\n          $item.find('.result').append \"#{wiki.resolveLinks text}<br>\"\n        checked++\n        report = \"found #{found} pages of #{checked} checked\"\n        report += \", #{sitemap.length - checked} remain\" if checked < sitemap.length\n        status report\n\nemit = ($item, item) ->\n  [program, listing, errors] = parse item.text\n  caption = if errors then \"#{errors} errors\" else 'ready'\n  $item.append \"\"\"\n    <div style=\"background-color:#eee;padding:15px;\">\n      <div style=\"text-align:center\">\n        <div class=listing>#{listing} <a class=open href='#'>Â»</a></div>\n        <button>find</button>\n        <p class=\"caption\">#{caption}</p>\n      </div>\n      <p class=\"result\"></p>\n    </div>\n  \"\"\"\n\nopen_all = (this_page, titles) ->\n  for title in titles\n    wiki.doInternalLink title, this_page\n    this_page = null\n\nbind = ($item, item) ->\n  $item.on 'dblclick', () -> wiki.textEditor $item, item\n  $item.find('button').on 'click', (e) ->\n    [program, listing, errors] = parse item.text\n    run $item, program unless errors\n  $item.find('a.open').on 'click', (e) ->\n    e.stopPropagation()\n    e.preventDefault()\n    this_page = $item.parents('.page') unless e.shiftKey\n    open_all this_page, $item.find('a.internal').map -> $(this).text()\n\n\n\nwindow.plugins.grep = {emit, bind} if window?\nmodule.exports = {parse, evalPart, evalPage} if module?\n"
  ],
  "mappings": "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"
}