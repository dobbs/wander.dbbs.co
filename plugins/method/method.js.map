{
  "version": 3,
  "names": [
    "annotate",
    "asUnits",
    "asValue",
    "avg",
    "bind",
    "coerce",
    "conversions",
    "difference",
    "dispatch",
    "emit",
    "emptyArray",
    "evaluate",
    "extend",
    "findFactor",
    "hasUnits",
    "ident",
    "inspect",
    "isEqual",
    "lexer",
    "packUnits",
    "parseLabel",
    "parseRatio",
    "parseUnits",
    "parser",
    "print",
    "printUnits",
    "product",
    "ratio",
    "round",
    "simplify",
    "sum",
    "unpackUnits",
    "obj",
    "constructor",
    "Number",
    "String",
    "Array",
    "Object",
    "value",
    "Function",
    "units",
    "string",
    "toLowerCase",
    "replace",
    "match",
    "sort",
    "numerator",
    "denominator",
    "phrases",
    "result",
    "from",
    "object",
    "properties",
    "key",
    "val",
    "length",
    "JSON",
    "stringify",
    "to",
    "label",
    "a",
    "b",
    "toUnits",
    "factor",
    "fromUnits",
    "Error",
    "concat",
    "u",
    "v",
    "nums",
    "denoms",
    "_ref",
    "_ref2",
    "d",
    "j",
    "keep",
    "len",
    "n",
    "unit",
    "where",
    "apply",
    "_toConsumableArray",
    "indexOf",
    "push",
    "splice",
    "join",
    "reduce",
    "each",
    "prod",
    "e",
    "ed",
    "en",
    "p",
    "pd",
    "pn",
    "_unpackUnits",
    "_unpackUnits2",
    "_slicedToArray",
    "_unpackUnits3",
    "_unpackUnits4",
    "dd",
    "dn",
    "nd",
    "nn",
    "_unpackUnits6",
    "_unpackUnits5",
    "_unpackUnits7",
    "_unpackUnits8",
    "toString",
    "toFixed",
    "text",
    "report",
    "hover",
    "line",
    "comment",
    "color",
    "linenum",
    "arguments",
    "undefined",
    "unpatched",
    "long",
    "substr",
    "str",
    "syms",
    "regexp",
    "RegExp",
    "buf",
    "c",
    "i",
    "tmp",
    "lexed",
    "expr",
    "fact",
    "term",
    "ref",
    "shift",
    "_typeof",
    "o",
    "state",
    "done",
    "args",
    "attach",
    "change",
    "count",
    "err",
    "input",
    "list",
    "local",
    "lookup",
    "output",
    "patch",
    "polynomial",
    "previous",
    "s",
    "show",
    "lines",
    "item",
    "split",
    "search",
    "elem",
    "source",
    "wiki",
    "getDataNodes",
    "div",
    "$",
    "data",
    "row",
    "table",
    "isNaN",
    "_",
    "find",
    "Exposure",
    "Raw",
    "Percentage",
    "subtype",
    "SubType",
    "Min",
    "Max",
    "C0",
    "C1",
    "C2",
    "Math",
    "pow",
    "C3",
    "C4",
    "C5",
    "C6",
    "min",
    "max",
    "legend",
    "readout",
    "toLocaleString",
    "name",
    "_ref3",
    "silent",
    "abs",
    "checks",
    "caller",
    "errors",
    "message",
    "_ref4",
    "error",
    "candidates",
    "handleScrub",
    "ref1",
    "refresh",
    "scrub",
    "$show",
    "ref2",
    "results",
    "results1",
    "addClass",
    "append",
    "html",
    "$td",
    "$b",
    "scale",
    "width",
    "shiftKey",
    "offsetX",
    "pageX",
    "target",
    "offset",
    "left",
    "empty",
    "$target",
    "is",
    "triggerHandler",
    "parent",
    "index",
    "hasClass",
    "get",
    "radarData",
    "on",
    "dialog",
    "textEditor",
    "setTimeout",
    "window",
    "plugins",
    "method",
    "eval",
    "module",
    "exports"
  ],
  "sources": [
    "method.coffee"
  ],
  "sourcesContent": [
    "###\n * Federated Wiki : Method Plugin\n *\n * Licensed under the MIT license.\n * https://github.com/fedwiki/wiki-plugin-method/blob/master/LICENSE.txt\n###\n\n############ units ############\n\nconversions = null\n\nasValue = (obj) ->\n  return NaN unless obj?\n  switch obj.constructor\n    when Number then obj\n    when String then +obj\n    when Array then asValue(obj[0])\n    when Object then asValue(obj.value)\n    when Function then asValue obj()\n    else NaN\n\nasUnits = (obj) ->\n  return [] unless obj?\n  switch obj.constructor\n    when Number then []\n    when String then []\n    when Array then asUnits(obj[0])\n    when Object\n      if obj.units? then obj.units\n      else if obj.value? then asUnits obj.value\n      else []\n    when Function then units(obj())\n    else []\n\nparseUnits = (string) ->\n  string = string.toLowerCase()\n  string = string.replace /\\bsquare\\s+(\\w+)\\b/, \"$1 $1\"\n  string = string.replace /\\bcubic\\s+(\\w+)\\b/, \"$1 $1 $1\"\n  units = string.match /(\\w+)/g\n  return [] unless units?\n  units.sort()\n\nparseRatio = (string) ->\n  if ratio = string.match /^\\((.+?)\\/(.+?)\\)$/\n    {numerator: parseUnits(ratio[1]), denominator: parseUnits(ratio[2])}\n  else if units = string.match /^\\((.+?)\\)$/\n    parseUnits units[1]\n  else undefined\n\nparseLabel = (string) ->\n  if phrases = string.match(/(\\(.+?\\)).*?(\\(.+?\\))?[^(]*$/)\n    result = {}\n    result.units = parseRatio phrases[1]\n    result.from = parseRatio phrases[2] if phrases[2]\n  result\n\nextend = (object, properties) ->\n  for key, val of properties\n    object[key] = val\n  object\n\nemptyArray = (obj) ->\n  obj.constructor is Array and obj.length is 0\n\nsimplify = (obj) ->\n  return NaN unless obj?\n  switch obj.constructor\n    when Number then obj\n    when String then +obj\n    when Array then simplify(obj[0])\n    when Object\n      if obj.units == undefined then simplify obj.value\n      else if emptyArray obj.units then simplify obj.value\n      else obj\n    when Function then simplify obj()\n    else NaN\n\ninspect = (obj) ->\n  return \"nullish\" unless obj?\n  switch obj.constructor\n    when Number then obj\n    when String then obj\n    when Array then JSON.stringify(obj).replace /\\\"/g, ''\n    when Object then JSON.stringify(obj).replace /\\\"/g, ''\n    when Function then 'functionish'\n    else \"wierdish\"\n\nfindFactor = (to, from) ->\n  for label, value of conversions\n    if value.from? and isEqual from, value.from\n      if isEqual to, value.units\n        return asValue value\n    if value.from? and isEqual to, value.from\n      if isEqual from, value.units\n        return 1/(asValue value)\n  return null\n\nhasUnits = (obj) ->\n  not emptyArray asUnits obj\n\nisEqual = (a, b) ->\n  (inspect a) is (inspect b)\n\ncoerce = (toUnits, value) ->\n  # console.log \"coerce to #{inspect toUnits}\"\n  if isEqual toUnits, fromUnits = asUnits simplify value\n    value\n  else if factor = findFactor toUnits, fromUnits\n    return {value: factor * asValue(value), units: toUnits}\n  else\n    throw new Error \"can't convert to #{inspect toUnits} from #{inspect fromUnits}\"\n\nunpackUnits = (value) ->\n  v = asValue value\n  u = asUnits value\n  if u.constructor is Array\n    numerator = u\n    denominator = []\n  else\n    numerator = u.numerator\n    denominator = u.denominator\n  [v, numerator, denominator]\n\npackUnits = (nums, denoms) ->\n  n = [].concat nums...\n  d = [].concat denoms...\n  keep = []\n  for unit in d\n    if (where = n.indexOf unit) is -1\n      keep.push unit\n    else\n      n.splice where, 1\n  if keep.length\n    {numerator: n.sort(), denominator: keep.sort()}\n  else\n    n.sort()\n\nprintUnits = (units) ->\n  if emptyArray units\n    ''\n  else if units.constructor is Array\n    \"( #{units.join ' '} )\"\n  else\n    \"( #{units.numerator.join ' '} / #{units.denominator.join ' '} )\"\n\n\n############ calculation ############\n\nsum = (v) ->\n  simplify v.reduce (sum, each) ->\n    toUnits = asUnits simplify each\n    value = coerce toUnits, sum\n    {value: asValue(value) + asValue(each), units: toUnits }\n\ndifference = (v) ->\n  # list[0] - list[1]\n  toUnits = asUnits simplify v[1]\n  value = coerce toUnits, v[0]\n  {value: asValue(value) - asValue(v[1]), units: toUnits }\n\nproduct = (v) ->\n  simplify v.reduce (prod, each) ->\n    [p, pn, pd] = unpackUnits prod\n    [e, en, ed] = unpackUnits each\n    {value: p*e, units: packUnits([pn,en],[pd,ed])}\n\nratio = (v) ->\n  # list[0] / list[1]\n  [n, nn, nd] = unpackUnits v[0]\n  [d, dn, dd] = unpackUnits v[1]\n  simplify {value: n/d, units: packUnits([nn,dd],[nd,dn])}\n\navg = (v) ->\n  sum(v)/v.length\n\nround = (n) ->\n  return '?' unless n?\n  if n.toString().match /\\.\\d\\d\\d/\n    n.toFixed 2\n  else\n    n\n\nannotate = (text) ->\n  return '' unless text?\n  \" <span title=\\\"#{text}\\\">*</span>\"\n\nprint = (report, value, hover, line, comment, color, linenum=0, unpatched=value) ->\n  return unless report?\n  long = ''\n  if line.length > 40\n    long = line\n    line = \"#{line.substr 0, 20} ... #{line.substr -15}\"\n  report.push \"\"\"\n    <tr style=\"background:#{color};\">\n      <td class=\"value\"\n        data-value=\"#{asValue unpatched}\"\n        data-linenum=\"#{linenum}\"\n        style=\"width: 20%; text-align: right; padding: 0 4px;\"\n        title=\"#{hover||''}\">\n          <b>#{round asValue value}</b>\n      <td title=\"#{long}\">#{line}#{annotate comment}</td>\n    \"\"\"\n\n############ expression ############\n\nident = (str, syms) ->\n  if str.match /^\\d+(\\.\\d+)?(e\\d+)?$/\n    Number str\n  else\n    regexp = new RegExp \"\\\\b#{str}\\\\b\"\n    for label, value of syms\n      return value if label.match regexp\n    throw new Error \"can't find value for '#{str}'\"\n\nlexer = (str, syms={}) ->\n  buf = []\n  tmp = \"\"\n  i = 0\n  while i < str.length\n    c = str[i++]\n    continue  if c is \" \"\n    if c in [\"+\", \"-\", \"*\", \"/\", \"(\", \")\"]\n      if tmp\n        buf.push ident(tmp, syms)\n        tmp = \"\"\n      buf.push c\n      continue\n    tmp += c\n  buf.push ident(tmp, syms) if tmp\n  buf\n\nparser = (lexed) ->\n  # term : fact { (*|/) fact }\n  # fact : number | '(' expr ')'\n  fact = ->\n    c = lexed.shift()\n    return c  if typeof(c) in [\"number\", \"object\"]\n    if c is \"(\"\n      c = expr()\n      throw new Error \"missing paren\"  if lexed.shift() isnt \")\"\n      return c\n    throw new Error \"missing value\"\n  term = ->\n    c = fact()\n    while lexed[0] in [\"*\", \"/\"]\n      o = lexed.shift()\n      c = product [c, term()]  if o is \"*\"\n      c = ratio [c, term()]  if o is \"/\"\n    c\n  expr = ->\n    c = term()\n    while lexed[0] in [\"+\", \"-\"]\n      o = lexed.shift()\n      c = sum [c, term()]  if o is \"+\"\n      c = difference [c, term()]  if o is \"-\"\n    c\n  expr()\n\n############ interpreter ############\n\ndispatch = (state, done) ->\n  state.list ||= []\n  state.input ||= {}\n  state.output ||= {}\n  state.local ||= {}\n  state.patch ||= {}\n  state.lines ||= state.item.text.split \"\\n\"\n  state.linenum ||= 0\n  state.linenum += 1\n  line = state.lines.shift()\n  return done state unless line?\n\n  attach = (search) ->\n    for elem in wiki.getDataNodes state.div\n      if (source = $(elem).data('item')).text.indexOf(search) >= 0\n        return source.data\n    throw new Error \"can't find dataset with caption #{search}\"\n\n  lookup = (v) ->\n    table = attach 'Tier3ExposurePercentages'\n    return NaN if isNaN v[0]\n    return NaN if isNaN v[1]\n    row = _.find table, (row) ->\n      asValue(row.Exposure)==v[0] and asValue(row.Raw)==v[1]\n    throw new Error \"can't find exposure #{v[0]} and raw #{v[1]}\" unless row?\n    asValue(row.Percentage)\n\n  polynomial = (v, subtype) ->\n    table = attach 'Tier3Polynomials'\n    row = _.find table, (row) ->\n      \"#{row.SubType} Scaled\" == subtype and asValue(row.Min) <= v and asValue(row.Max) > v\n    throw new Error \"can't find applicable polynomial for #{v} in '#{subtype}'\" unless row?\n    result  = asValue(row.C0)\n    result += asValue(row.C1) * v\n    result += asValue(row.C2) * Math.pow(v,2)\n    result += asValue(row.C3) * Math.pow(v,3)\n    result += asValue(row.C4) * Math.pow(v,4)\n    result += asValue(row.C5) * Math.pow(v,5)\n    result += asValue(row.C6) * Math.pow(v,6)\n    result = 1 - result if asValue(row['One minus'])\n    Math.min(1, Math.max(0, result))\n\n  show = (list, legend) ->\n    value = sum list\n    legend += \"<br>#{printUnits asUnits value}\" if emptyArray(asUnits parseLabel legend)\n    readout = Number(asValue value).toLocaleString('en')\n    state.show ||= []\n    state.show.push {readout, legend}\n    value\n\n  apply = (name, list, label='') ->\n    result = switch name\n      when 'SUM' then sum list\n      when 'AVG', 'AVERAGE' then avg list\n      when 'MIN', 'MINIMUM' then _.min list\n      when 'MAX', 'MAXIMUM' then _.max list\n      when 'RATIO' then ratio list\n      when 'ACCUMULATE' then (sum list) + (output[label] or input[label] or 0)\n      when 'FIRST' then list[0]\n      when 'PRODUCT' then product list\n      when 'LOOKUP' then lookup list\n      when 'POLYNOMIAL' then polynomial list[0], label\n      when 'SHOW' then show list, label\n      when 'CALC' then parser lexer(label, state.local)\n      else throw new Error \"don't know how to '#{name}'\"\n    if name is 'CALC' or emptyArray toUnits = asUnits parseLabel label\n      result\n    else\n      coerce toUnits, result\n\n  unpatched = null\n  patch = (value) ->\n    unpatched = value\n    state.patch[state.linenum] || value\n\n  color = '#eee'\n  value = comment = hover = null\n  conversions = input = state.input\n  output = state.output\n  local = state.local\n  list = state.list\n  label = null\n\n  try\n\n    # 99.9 Label (units)\n    if args = line.match /^([0-9.eE-]+) +([\\w \\.%(){},&\\*\\/+-]+)$/\n      result = patch +args[1]\n      units = parseLabel label = args[2]\n      result = extend {value: result}, units if units\n      local[label] = output[label] = value = result\n\n    # OPERATION Label (units)\n    else if args = line.match /^([A-Z]+) +([\\w \\.%(){},&\\*\\/+-]+)$/\n      [value, list, count] = [apply(args[1], list, args[2]), [], list.length]\n      color = '#ddd'\n      hover = \"#{args[1]} of #{count} numbers\\n= #{asValue value} #{printUnits asUnits value}\"\n      label = args[2]\n      if (output[label]? or input[label]?) and !state.item.silent\n        previous = asValue(output[label]||input[label])\n        if Math.abs(change = value/previous-1) > 0.0001\n          comment = \"previously #{previous}\\nΔ #{round(change*100)}%\"\n      local[label] = output[label] = value\n      if (s = state.item.checks) && (v = s[label]) != undefined\n        if asValue(v).toFixed(4) != asValue(value).toFixed(4)\n          color = '#faa'\n          label += \" != #{asValue(v).toFixed(4)}\"\n          state.caller.errors.push({message: label}) if state.caller\n\n    # OPERATION\n    else if args = line.match /^([A-Z]+)$/\n      [value, list, count] = [apply(args[1], list), [], list.length]\n      value = patch value\n      local[args[1]] = value\n      color = '#ddd'\n      hover = \"#{args[1]} of #{count} numbers\\n= #{asValue value} #{printUnits asUnits value}\"\n\n    # 99.9\n    else if line.match /^[0-9\\.eE-]+$/\n      value = patch +line\n      label = ''\n\n    # Label\n    else if args = line.match /^ *([\\w \\.%(){},&\\*\\/+-]+)$/\n      if output[args[1]]?\n        local[args[1]] = value = patch output[args[1]]\n      else if input[args[1]]?\n        local[args[1]] = value = patch input[args[1]]\n      else\n        color = '#edd'\n        comment = \"can't find value of '#{line}'\"\n\n    else\n      color = '#edd'\n      comment = \"can't parse '#{line}'\"\n\n  catch err\n    color = '#edd'\n    value = null\n    # console.log \"trouble\", inspect statck\n    comment = err.message\n  if state.caller? and color == '#edd'\n    state.caller.errors.push({message: comment})\n  state.list = list\n  state.list.push value if value? and ! isNaN asValue value\n  # console.log \"#{line} => #{inspect state.list} #{comment||''}\"\n  print state.report, value, hover, label||line, comment, color, state.linenum, unpatched\n  dispatch state, done\n\n\n############ interface ############\n\n\nbind = (div, item) ->\nemit = (div, item, done) ->\n\n  input = {}\n  output = {}\n\n  refresh = (state) ->\n    if state.show\n      state.div.addClass \"data\"\n      state.div.append $show = $ \"<div>\"\n      for each in state.show\n        $show.append $ \"\"\"\n          <p class=readout>#{each.readout}</p>\n          <p class=legend>#{each.legend}</p>\n        \"\"\"\n    else\n      text = state.report.join \"\\n\"\n      table = $('<table style=\"width:100%; background:#eee; padding:.8em; margin-bottom:5px;\"/>').html text\n      state.div.append table\n      if input['debug']\n        for label, value of state.output\n          state.div.append $(\"<p class=error>#{label} =><br> #{inspect value}</p>\")\n      if output['debug']\n        for label, value of state.input\n          state.div.append $(\"<p class=error>#{label} =><br> #{inspect value}</p>\")\n\n  scrub = (e, $td, $b) ->\n    patch = {}\n    if e.shiftKey\n        # from http://bugs.jquery.com/ticket/8523#comment:16\n      if typeof e.offsetX == \"undefined\"\n        e.offsetX = e.pageX - $(e.target).offset().left\n      # console.log 'scrub', e\n      width = $td.width()/2\n      scale = Math.pow(2, (e.offsetX-width)/width)\n      scale = Math.min(2, Math.max(0.5, scale))\n      patch[$td.data('linenum')] = $td.data('value')*scale\n    state = {div, item, input, output, report:[], patch}\n    dispatch state, (state) ->\n      div.empty()\n      refresh state\n\n  handleScrub = (e) ->\n    $target = $(e.target)\n    if $target.is('td')\n      $(div).triggerHandler('thumb', $target.text())\n    if $target.is('td.value')\n      scrub e, $target, $target.find('b')\n    if $target.is('b')\n      scrub e, $target.parent(), $target\n\n  candidates = $(\".item:lt(#{$('.item').index(div)})\")\n  for elem in candidates\n    elem = $(elem)\n    if elem.hasClass 'radar-source'\n      _.extend input, elem.get(0).radarData()\n    else if elem.hasClass 'data'\n      _.extend input, elem.data('item')?.data?[0]\n\n  div.addClass 'radar-source'\n  div.get(0).radarData = -> output\n\n  div.on 'mousemove', (e) -> handleScrub e\n\n  div.on 'dblclick', (e) ->\n    if e.shiftKey\n      wiki.dialog \"JSON for Method plugin\",  $('<pre/>').text(JSON.stringify(item, null, 2))\n    else\n      wiki.textEditor state.div, state.item\n\n  state = {div, item, input, output, report:[]}\n  dispatch state, (state) ->\n    refresh state\n    setTimeout done, 10  # slower is better for firefox\n\nevaluate = (caller, item, input, done) ->\n  state = {caller: caller, item: item, input: input, output: {}}\n  dispatch state, (state, input) ->\n    done state.caller, state.output\n\nwindow.plugins.method = {emit, bind, eval:evaluate} if window?\nmodule.exports = {lexer, parser, dispatch, asValue, asUnits, hasUnits, simplify, parseUnits, parseRatio, parseLabel} if module?\n"
  ],
  "mappings": "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"
}